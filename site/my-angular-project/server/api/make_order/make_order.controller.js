/**
 * Using Rails-like standard naming convention for endpoints.
 * GET     /things              ->  index
 * POST    /things              ->  create
 * GET     /things/:id          ->  show
 * PUT     /things/:id          ->  update
 * DELETE  /things/:id          ->  destroy
 */

'use strict';

var _ = require('lodash');
var express = require('express');
var async = require('async');
var Web3 = require('web3');
var makePromise2 = require('../deferred');
var Settings = require('../settings');
var settings = new Settings();
var Base64 = require('../base64');
var base64 = new Base64();
var dirty = require('dirty')('my.db');
var forge = require('node-forge');
//var web3provider = typeof(web3) !== 'undefined' ? web3.currentProvider : new Web3.providers.HttpProvider(settings.web3provider);
var web3provider = new Web3.providers.HttpProvider(settings.web3provider);
var web3 = new Web3(web3provider);

var hashFnv32a = function(str, asString, seed) {
    /*jshint bitwise:false */
    var i, l,
        hval = (seed === undefined) ? 0x811c9dc5 : seed;

    for (i = 0, l = str.length; i < l; i++) {
        hval ^= str.charCodeAt(i);
        hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);
    }
    if( asString ){
        // Convert to 8 digit hex string
        return ("0000000" + (hval >>> 0).toString(16)).substr(-8);
    }
    return hval >>> 0;
};

var getHash = function(value) {
  //var hash = $scope.web3.sha3(value);
  var hash = hashFnv32a(value, false);
  dirty.set(hash, value);
  return hash;
};

var checkArguments = function(input, keywords) {
  for(var i = 0; i < keywords.length; i++) {
    if(typeof(input[keywords[i][0]]) != keywords[i][1]) {
      throw "Wrong input data: type of '" + keywords[i][0] +
       "' is not a '" + keywords[i][1] + "'";
    }
  }
}

exports.index = async function(req, res) {
  var props = _.merge(req.body, req.params, req.query);
  var data = props['data'];
  //var data = "ew0KICAiY3VzdG9tZXIiOiB7DQogICAgImFjY291bnQiOiAiMHhjY2E3NWJlNmEyMGUyMjg4YTEzMDUxMTk3MzAyNzc4M2FkY2M0ZTUzIiwNCiAgICAicGFzc3dvcmQiOiAiIg0KICB9LA0KICAidHJpcHMiOiBbDQogICAgew0KICAgICAgImNhcnJpZXIiOiAiMHhjY2E3NWJlNmEyMGUyMjg4YTEzMDUxMTk3MzAyNzc4M2FkY2M0ZTUzIiwNCiAgICAgICJwcmljZSI6ICIxMDA1MDAiLA0KICAgICAgInBpY2t1cCI6IHsNCiAgICAgICAgImFkZHJlc3MiOiAi0JzQvtGB0LrQstCwIiwNCiAgICAgICAgImRhdGUiOiAiMTUyMjQyNjc5OTYxNCIsDQogICAgICAgICJjYXJnbyI6IHsNCiAgICAgICAgICAibmFtZSI6ICLQkNGA0LHRg9C30YsiLA0KICAgICAgICAgICJhbW91bnQiOiAxMCwNCiAgICAgICAgICAidW5pdHMiOiAi0LrQuNC70L7RgtC+0L3QvdGLIg0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgImRyb3Bkb3duIjogew0KICAgICAgICAiYWRkcmVzcyI6ICLQo9GA0Y7Qv9C40L3RgdC6IiwNCiAgICAgICAgImRhdGUiOiAiMTUyMjQyNjc5OTYxNCIsDQogICAgICAgICJjYXJnbyI6IHsNCiAgICAgICAgICAibmFtZSI6ICLQmtC+0YDQutC4INC+0YIg0LDRgNCx0YPQt9C+0LIiLA0KICAgICAgICAgICJhbW91bnQiOiA1LA0KICAgICAgICAgICJ1bml0cyI6ICLQutC40LvQvtGC0L7QvdC90YsiDQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQogIF0NCn0=";
  if(typeof(data) == 'undefined') {
    res.json({
      status: 'ERROR: data argument is undefined'
    });
    return;
  }

  try {
//    var jsonData = base64.decode(data);
    //var jsonData = forge.util.decode64(data);
    var decodedBytes = forge.util.decode64(data);
    var jsonData = forge.util.decodeUtf8(decodedBytes);
    var input = JSON.parse(jsonData);

    checkArguments(input, [["customer", "object"], ["trips", "object"]]);
    checkArguments(input.customer, [["account", "string"], ["password", "string"]]);
    checkArguments(input.trips[0], [
                            ["carrier", "string"],
                            ["price", "string"],
                            ["pickup", "object"],
                            ["dropdown", "object"]]);
    checkArguments(input.trips[0].pickup, [
                            ["address", "string"],
                            ["date", "string"],
                            ["cargo", "object"]]);
    checkArguments(input.trips[0].pickup.cargo, [
                            ["name", "string"],
                            ["amount", "number"],
                            ["units", "string"]]);
    checkArguments(input.trips[0].dropdown, [
                            ["address", "string"],
                            ["date", "string"],
                            ["cargo", "object"]]);
    checkArguments(input.trips[0].dropdown.cargo, [
                            ["name", "string"],
                            ["amount", "number"],
                            ["units", "string"]]);
   var platformJsonData = base64.decode(settings.platformJsonB64);
   var platformProto = JSON.parse(platformJsonData);
   var contract = await web3.eth.contract(platformProto);
   var platform = await contract.at(settings.platformAddress);

   await makePromise2(web3.personal.unlockAccount, [input.customer.account, input.customer.password]);


   var trackHashes = [];
   var trackAddress = [];
   var trackPrices = [];
   for(var i = 0; i < input.trips.length; i++) {
      var item = input.trips[i];
      trackHashes.push(getHash(item.pickup.address));  // pickup.location
      trackHashes.push(getHash(item.pickup.date.toString()));  // pickup.date
      trackHashes.push(getHash(JSON.stringify(item.pickup.cargo)));  // pickup.description
      trackHashes.push(getHash(item.dropdown.address));  // dropdown.location
      trackHashes.push(getHash(item.dropdown.date.toString()));  // dropdown.date
      trackHashes.push(getHash(JSON.stringify(item.dropdown.cargo)));  // dropdown.description
      trackHashes.push(getHash(new Date().toString()));  // assignment.date (.getTime() needed??)
      trackHashes.push(getHash('shit'));  // assignment.proof (BUG - implemented in future)
      trackAddress.push(item.carrier); // carrier
      trackPrices.push(item.price); // price in microCC
    }
    // pack arguments into arrays

/*    var transactionHash = await makePromise2(platform.addOrder, [input.customer.account,
      trackHashes, trackAddress, trackPrices, settings.cargoCoinAddress,
      {from:input.customer.account, to:settings.platformAddress, gas:3000000 }]);
    // deploy new order */

    var abi = base64.decode(settings.orderJsonb64);
    var bin = '0x6060604052341561000f57600080fd5b604051610d6a380380610d6a8339810160405280805191906020018051820191906020018051820191906020018051820191906020018051919060200180519150505b600080600061005f610515565b610067610515565b61006f610535565b60008054600160a060020a03338116600160a060020a031992831617808455600680548d8416908516179055600780548c841690851617905560088054309093169290931691909117909155819060a060020a60ff02191674010000000000000000000000000000000000000000825b021790555060018054600160a060020a031916600160a060020a038e16179055600095508594508493505b885184101561047a578360080295506060604051908101604052808c888151811061013157fe5b9060200190602002015163ffffffff1681526020018c886001018151811061015557fe5b9060200190602002015163ffffffff1681526020018c886002018151811061017957fe5b9060200190602002015163ffffffff16905292506060604051908101604052808c88600301815181106101a857fe5b9060200190602002015163ffffffff1681526020018c88600401815181106101cc57fe5b9060200190602002015163ffffffff1681526020018c88600501815181106101f057fe5b9060200190602002015163ffffffff169052915060408051908101604052808c886006018151811061021e57fe5b9060200190602002015163ffffffff1681526020018c886007018151811061024257fe5b9060200190602002015163ffffffff169052905060c06040519081016040528060005b81526020018481526020018381526020018b868151811061028257fe5b90602001906020020151600160a060020a031681526020018281526020018a86815181106102ac57fe5b906020019060200201519052600354600090815260056020526040902081518154829060ff191660018360038111156102e157fe5b02179055506020820151600182018151815463ffffffff191663ffffffff919091161781556020820151815463ffffffff919091166401000000000267ffffffff00000000199091161781556040820151815463ffffffff919091166801000000000000000002604060020a63ffffffff0219909116179055506040820151600282018151815463ffffffff191663ffffffff919091161781556020820151815463ffffffff919091166401000000000267ffffffff00000000199091161781556040820151815463ffffffff919091166801000000000000000002604060020a63ffffffff0219909116179055506060820151600382018054600160a060020a031916600160a060020a03929092169190911790556080820151600482018151815463ffffffff191663ffffffff919091161781556020820151815463ffffffff919091166401000000000267ffffffff00000000199091161790555060a08201516005909101555088848151811061045757fe5b90602001906020020151600380546001019055909401935b60019093019261010a565b6002859055600754600854600160a060020a0391821691633d1c40aa91166040517c010000000000000000000000000000000000000000000000000000000063ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156104ef57600080fd5b6102c65a03f1151561050057600080fd5b5050505b50505050505050505050505061054c565b606060405190810160409081526000808352602083018190529082015290565b604080519081016040526000808252602082015290565b61080f8061055b6000396000f300606060405236156100885763ffffffff60e060020a6000350416631bce6ff3811461008d5780632095b823146100b95780632804b2c0146100de578063522e11771461010d578063629058ca14610144578063a035b1fe146101ca578063ab1daaa6146101ef578063c19d93fb14610214578063d36dedd21461024b578063ea8a1af0146102b0575b600080fd5b6100956102e7565b604051808260068111156100a557fe5b60ff16815260200191505060405180910390f35b34156100c457600080fd5b6100cc6103f8565b60405190815260200160405180910390f35b34156100e957600080fd5b6100f16103fe565b604051600160a060020a03909116815260200160405180910390f35b341561011857600080fd5b61009561040d565b604051808260068111156100a557fe5b60ff16815260200191505060405180910390f35b341561014f57600080fd5b61015a60043561056d565b604051808a600381111561016a57fe5b60ff168152600160a060020a0390991660208a01525060408089019790975263ffffffff9586166060890152938516608088015291841660a0870152831660c0860152821660e08501521661010083015261012090910191505180910390f35b34156101d557600080fd5b6100cc610610565b60405190815260200160405180910390f35b34156101fa57600080fd5b6100cc610616565b60405190815260200160405180910390f35b341561021f57600080fd5b61022761061c565b604051808260058111156100a557fe5b60ff16815260200191505060405180910390f35b341561025657600080fd5b61025e61062c565b6040518086600581111561026e57fe5b60ff16815260200185600160a060020a0316600160a060020a031681526020018481526020018381526020018281526020019550505050505060405180910390f35b34156102bb57600080fd5b61009561065b565b604051808260068111156100a557fe5b60ff16815260200191505060405180910390f35b60015460009033600160a060020a03908116911614156103f35760005b60005460a060020a900460ff16600581111561031c57fe5b14156103f357600654600854600254600160a060020a03928316926323b872dd92339291169060006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561039a57600080fd5b6102c65a03f115156103ab57600080fd5b5050506040518051151560011490506103c6575060056103f3565b600080546002919074ff0000000000000000000000000000000000000000191660a060020a835b02179055505b5b5b90565b60035481565b600154600160a060020a031681565b6000808060025b60005460a060020a900460ff16600581111561042c57fe5b1461043a5760019250610568565b60015433600160a060020a039081169116141561056357506001905060005b60035481101561052e5760065460008281526005602081905260408083206003810154920154600160a060020a03948516946351355362949316929091879190516020015260405160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091526044820152606401602060405180830381600087803b15156104e957600080fd5b6102c65a03f115156104fa57600080fd5b50505060405180515050600081815260056020526040902080546002919060ff19166001835b02179055505b600101610459565b600080546003919074ff0000000000000000000000000000000000000000191660a060020a835b021790555060009250610568565b600392505b505090565b60008060008060008060008060006003548a10151561058857fe5b505050600087815260056020819052604090912080546003820154928201546001830154600284015460049094015460ff9093169a50600160a060020a039094169850965063ffffffff8084169650680100000000000000009384900481169550828116945092909104821691818116916401000000009004165b9193959799909294969850565b60025481565b60045481565b60005460a060020a900460ff1681565b60005460015460025460035460045460a060020a90940460ff1693600160a060020a03909316925b9091929394565b60008060025b60005460a060020a900460ff16600581111561067957fe5b1461068757600191506107df565b60015433600160a060020a03908116911614156107da57600654600854600160a060020a03918216916370a08231911660006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156106fe57600080fd5b6102c65a03f1151561070f57600080fd5b505050604051805191505060008111156107a557600654600154600160a060020a039182169163a9059cbb91168360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561078957600080fd5b6102c65a03f1151561079a57600080fd5b505050604051805150505b600080546004919074ff0000000000000000000000000000000000000000191660a060020a835b0217905550600091506107df565b600691505b50905600a165627a7a72305820736d982237bf1400e2c44309cce78a0604c8e0370cc290b85b89935ddde0ca210029';
    var orderProxy = web3.eth.contract(JSON.parse(abi));

    var contract = orderProxy.new(input.customer.account,
          trackHashes, trackAddress, trackPrices, settings.cargoCoinAddress, settings.platformAddress,
          {from:input.customer.account, gas:3000000, gasPrice:"20000000000", data: bin});

//    web3.personal.lockAccount(input.customer.account);
//    var vvv = decodeURI(dirty.get(trackHashes[2]));
    var vvv = dirty.get(trackHashes[2]);
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    res.json({
      status: 'OK',
      tx: contract.transactionHash
      //,value: vvv
    });
  }
  catch(e) {
    console.log(e);
    res.json({
      status: 'ERROR: ' + e.toString()
    });
  };
};
